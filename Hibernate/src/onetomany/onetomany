One to Many:
---------------
  
1 row in table1 is related to multiple rows in table2.
 
 lets consider
 Customer table
 Account table
 
one customer can have multiple accounts..  
Relation from customer to account -> One to Many

Multiple accounts belongs to one customer
Relation from account to customer ->Many to One
  
DB Design:
------------
  
   Customer                               
   ------------
   ID(PK)                               
   AGE                                     
   CUSTOMER NAME  
   
                                      
 Account
 ---------
 ID(PK)
 AccountName 
 Description> 
 CUSTID(FK)  --> refers the ID column of Customer table
 
 
 Java Design:
---------------

package name: onetomany

1.Accounts.java -> @ManyToOne Annotation with one customer obj
2.Customer.java -> @OneToMany Annotation with list of account objs

Annotations:
 
Customer.java: 
----------------------
  @OneToMany(cascade= CascadeType.ALL , fetch= FetchType.LAZY , 
			mappedBy="customer") //relate the one to many relationship
	private List<Accounts> accounts;         
  
  
  mappedBy value is equal to the instance variable name in Accounts.java
  

Accounts.java:
---------------------
 @ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "custId", nullable = false)
	private Customer customer;      //relate the many to one relationship
  
  



   
@Entity
@Table(name = "Accounts")
public class Accounts implements Serializable {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "Id")
	private int Id;

	@Column(name = "accountName", nullable = false)
	private String accountName;

	@Column(name = "description", nullable = false)
	private String description;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "custId", nullable = false)
	private Customer customer;

	public Accounts() {
		super();
	}

	public Accounts(String accountName, String description) {
		super();
		this.accountName = accountName;
		this.description = description;
	}

	public Accounts(String accountName, String description, Customer customer) {
		super();
		this.accountName = accountName;
		this.description = description;
		this.customer = customer;
	}

	 

}



 
@Entity
@Table(name = "Customer")
public class Customer implements Serializable {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "Id")
	private int Id;

	@Column(name = "customerName", nullable = false)
	private String customerName;

	@Column(name = "age", nullable = false)
	private int age;
	
	@OneToMany(cascade= CascadeType.ALL , fetch= FetchType.LAZY , 
			mappedBy="customer")
	private List<Accounts> accounts;
	
	 

}


2.add entries in hibernate.cfg.xml:


<mapping class="onetomany.Customer" />
<mapping class="onetomany.Accounts" />
  
  
  1.Insert with cascade: (1 customer with 3 accounts)
---------------------------------------------
1.session factory
2.session
3.create customer obj with data
4.create 3 accounts objs with data
5.keep all the accounts objs inside the customer obj
6.save customer obj     -----> 1 row is inserted in customer table and 3 rows are inserted in accounts table.
7.close session.
  
  
  
  
  
		