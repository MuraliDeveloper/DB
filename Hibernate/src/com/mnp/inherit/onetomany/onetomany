One to Many:
---------------
  
1 row in table1 is related to multiple tables in table2.
  
one customer can have multiple accounts..  
Relation from customer to account -> One to Many

Multiple accounts belongs to one account..  
Relation from account to customer ->Many to One
  
DB Design:
------------
  
   Customer                               
   ------------
   ID(PK)                               
   AGE                                     
   CUSTOMER NAME  
   
                                      
 Account
 ---------
 ID(PK)
 AccountName 
 Description> 
 CUSTID(FK)  --> refers the ID column of Customer table
 
 
 Java Design:
---------------
  paclage name: onetomany
  
1.Accounts.java
2.Customer.java
  
  
import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;


@Entity
@Table(name = "Accounts")
public class Accounts implements Serializable {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "Id")
	private int Id;

	@Column(name = "accountName", nullable = false)
	private String accountName;

	@Column(name = "description", nullable = false)
	private String description;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "custId", nullable = false)
	private Customer customer;

	public Accounts() {
		super();
	}

	public Accounts(String accountName, String description) {
		super();
		this.accountName = accountName;
		this.description = description;
	}

	public Accounts(String accountName, String description, Customer customer) {
		super();
		this.accountName = accountName;
		this.description = description;
		this.customer = customer;
	}

	public Customer getCustomer() {
		return customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	public int getId() {
		return Id;add
	}

	public void setId(int id) {
		Id = id;
	}

	public String getAccountName() {
		return accountName;
	}

	public void setAccountName(String accountName) {
		this.accountName = accountName;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Override
	public String toString() {
		return "Accounts [Id=" + Id + ", accountName=" + accountName + ", description=" + description + ", customer="
				+ customer + "]";
	}

}





import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;


import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
@Entity
@Table(name = "Customer")
public class Customer implements Serializable {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "Id")
	private int Id;

	@Column(name = "customerName", nullable = false)
	private String customerName;

	@Column(name = "age", nullable = false)
	private int age;
	
	@OneToMany(cascade= CascadeType.ALL , fetch= FetchType.LAZY , 
			mappedBy="customer")
	private List<Accounts> accounts;
	
	public List<Accounts> getAccounts() {
		if(accounts==null){
			accounts =  new ArrayList<Accounts>();
		}
		return accounts;
	}


	@Override
	public String toString() {
		return "Customer [Id=" + Id + ", customerName=" + customerName
				+ ", age=" + age + "]";
	}

	public Customer( String customerName, int age) {
		super();
		this.customerName = customerName;
		this.age = age;
	}

	public Customer() {
		super();
	}

	public void setAccounts(List<Accounts> accounts) {
		this.accounts = accounts;
	}

	public int getId() {
		return Id;
	}

	public void setId(int id) {
		Id = id;
	}

	public String getCustomerName() {
		return customerName;
	}

	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

}


Annotations:
 
Customer.java: 
----------------------
  @OnetoMany            //relate the one to many relationship
  List<Accounts> acccunts;

Accounts.java:
---------------------
  @ManytoOne      //relate the many to one relationship
  @JoinColumn(name = "custId", nullable = false)  // for a foreign key
  Customer customer;
  

2.add entries in hibernate.cfg.xml:


<mapping class="onetomany.Customer" />
<mapping class="onetomany.Accounts" />
  
  
  1.Insert with cascade: (1 customer with 3 accounts)
---------------------------------------------
1.session factory
2.session
3.create customer obj with data
4.create 3 accounts objs with data
5.keep all the accounts objs inside the customer obj
6.save customer obj     -----> 1 row is inserted in customer table and 3 rows are inserted in accounts table.
7.close session.
  
  
  
  
  
		