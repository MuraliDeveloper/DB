Framework:
----------------
External library that contains the prewritten code solutions for most of the common problms in the project.

ex: springs [mvc, rest, jdbc ] , hiberante 

Framework is available in the form of jar files


java frameworks:
-----------------

--- too complex
--- heavy weight components
--- collections of apis to solve specific prblms
--- Jars


adv:
---------
efficiency
security
expences
save time and lots of code
support for faster development


dis:
------
code is public or opensource
custom builtin 




Hibernate is a open source framework.
Hibernate is used for DAO layer for db operations.
Hibernate is available in the form of jar files.

If we need Hibernate in our project:
-----------------------------------------
In the java project we need to import the Hibernate jar files.
  
  
Advantages :
- Hibernate is ORM frameowork.
  ORM : Object(JAVA) Relational(DATABASE) Mapping.
  For every table there is a java class.
  
  database:  
  Table : Visitor
  table columns: id, name,city, salary
  row : contains data
  
  java:
  class: Visitor
  instance variables: id, name,city, salary
  object : contains data
  
  Table == Class
  table columns ==  instance variables
  row == object
  
  
- save : object is converted to row
  read : row are converted to java objects.
    
-ex: 
if(rs.next()){
					//get columns for every row
					int id = rs.getInt("c_id");
					String name = rs.getString("c_name");
          String city = rs.getString("city");
					int salary = rs.getInt("salary");
					System.out.println(id +", " + name +", "+salary);
				}  

  Requirement : a table has 60 columns. Get  all columns values to java
  solution:
  - convert row to java obj(mapping logic) 
    JDBC : write 60 lines  
    Hibernate: write 1 line of code
    Adv: Less code , less maintainance
  
-change the table name/change column name/add new column/rename column:
in jdbc: the impact is huge 
in hibernate : the change is only in one place. 
  
-migrating the database . ex: oracle to mysql
in jdbc the change is very complex.
in hibernate the change is required in a single place. 
ex:change the dialect property in hiberante.xml   
  
  
- reusability, modularity , avoid code repetition , lossely coupled, faster development.

- Hibernate has its own query language, i.e HQL [hibernate query language] which is database independent.
  HQL will work for any database
  
- schema generation/table generation can be automatically using hibernate.

- In hibernate most of the cases developer doesn't not need to write the SQL queries,
 ==> the queries are auto generated by Hibernate.
 ==> For Insert/update queries: convert Java obj to Row is taken care by Hibernate
 ==> For Read queries: convert Row to Java obj is taken care by Hibernate
 

-Hibernate supports table relationships like One-To-Many,One-To-One, Many-To-Many-to-Many, Many-To-One.

- Hibernate supports Inheritance, Associations, Collections

- In jdbc all exceptions are checked exceptions,   exception handlig is mandatory
in hiberante we have Un-checked exceptions, so no need to take care of exception handling.

- In Jdbc we need to close the Connection , statement , resultset objects..
  In Hibernate all resources are closed automatically

- Hibernate supports caching mechanism , performance is improved + load on the db is reduced.

- pagination implementation is simplified.

- Lazy-Loading : 
The lazy-loading concept fetches only the necessary object that is required for the execution of an application.
  