Framework:
----------------
 - External library that contains the prewritten code
 - solutions for most of the common problms in the project.
 
ex: springs [mvc, rest, jdbc ] , hiberante 


Framework is available in the form of jar files.


adv :
------------
expences
save time and lots of code
support for faster development
efficiency
security


Hibernate:
---------------
Hibernate is a open source framework.
Hibernate is used for DAO layer for db operations.
Hibernate is available in the form of jar files.


If we need Hibernate in our project:
In the java project we need to download and import the Hibernate jar files.


Advantages :
----------------------
- Hibernate is ORM frameowork.
  ORM : Object(JAVA) Relational(DATABASE) Mapping.
  For every table there is a java class.
  
  
  
  database:  
   Table : Visitor
   table columns: id, name,city, salary
   row : contains data
   
   
  java:
  class: Visitor
  instance variables: id, name,city, salary
  object : contains data
  
  
  Table == Class
  table columns ==  instance variables
  row == object
  
  save : object is converted to row
  read : row are converted to java objects.
  
  
  Requirement : a table has 60 columns. Get  all columns values to java
   - convert row to java obj(mapping logic) 
   
  with hib : write 60 line of code
  Hibernate: write 1 line of code
  
  Adv: Less code , less maintainance
  
 -change the table name/change column name/add new column/rename column: 
   in jdbc: the impact is huge 
   in hibernate : the change is only in one place. 
  
  
 -migrating the database .
 ex: oracle to mysql
 
 in jdbc the change is very complex.
 in hibernate the change is required in a single place. 
 
 
 
  - reusability, modularity , avoid code repetition , lossely coupled, 
  faster development.
  
  - Hibernate has its own query language, 
  i.e HQL [hibernate query language] which is database independent.
  
  
- In hibernate most of the cases developer doesn't not need to write the SQL queries,
==> the queries are auto generated by Hibernate.
 ==> For Insert/update queries: convert Java obj to Row is taken care by Hibernate
  ==> For Read queries: convert Row to Java obj is taken care by Hibernate 
  
  
   
   
-Hibernate supports table relationships 
like One-To-Many,One-To-One, Many-To-Many-to-Many, Many-To-One.




- Hibernate supports Inheritance, Associations, Collections




- In jdbc all exceptions are checked exceptions,   exception handling is mandatory
in hiberante we have Un-checked exceptions, so no need to take care of exception handling.
   
  

- In Jdbc we need to close the Connection , statement , resultset objects..
  In Hibernate all resources are closed automatically




- Hibernate supports caching mechanism , performance is improved + load on the db is reduced.

- pagination implementation is simplified.




maven:
--------
- build tool
- helps to download and import the external jars
- for working with maven we need maven software (available with eclipse) 
- in project we need to modify pom.xml if any external jars is required .















Hib setup:
----------------
1.create the maven project 
Type groupId : eminent
Type artifactId : Hibernate
Finish

check project is created with pom.xml




2.Update pom.xml 

- add the dependencies for hibernate 
- add the dependencies for oracle driver 



pom.xml:
------------
   
  <dependencies>
	
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>5.2.9.Final</version>
</dependency>

  </dependencies>
  
  
  
  <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
        </plugins>
    </build>


3.create the hibernate.cfg.xml under src/main/java and provide configuration for
  - db configuration (username, password, connection string)
  - hib configuration( entity classes )
  
4. Create the entity classes.
(for every table there is a java class. that java class is termed as entity class)
 
 
 DB layer:
 -------------------
  Table : VisitorDetails
  table columns: id, name,city, salary
  row : contains data
  
  
  java:
  use annotation inside the entity class.
  
  
    Visitor.java:
  ------------------  
  
  @Entity
  @Table(name = "VisitorDetails")   // table name , Vistor class is associated with VisitorDetails table.
  public class Visitor{
	  
	   @Column(name="id") //db column name
	  int id;
	  
	   @Column(name="name") //db column name
	  String fname;
	  
	   @Column(name="city") //db column name
	  String city;
	  
	   @Column(name="salary") //db column name
	  Float salary;
  
  }
  
  
 How to establish the mapping between the table and entity class?
 SOlution:
 use hibernate annotations
  @Table - for mapping the table name and class name
  @Column - for mapping the column and instance variable
  
  
  
WE NEED TO REGISTER EVERY ENTITY CLASS INSIDE hibernate.cfg.cml
  
  
-how to configure entity class inside hibernate.cfg.xml?
syntax:
<mapping class="<packgaeName>.<className>" />

<mapping class="Basics.Visitor" />



 Hibernate components:
 ------------------------
  1.SessionFactory -> 1 time creation for entire application
  2.Session     -> every time for every transaction
                 -> For CRUD operations
  3.Query with HQL-> CRUD operations
  4.Criteria   -> Mostly for dynamic Read operations
  5.Transaction -> txn managemnet
  6.Caching  -> to reduce load and improve perf
              
 
 
  
 1.How to create session factory obj?
---------------------------------------------------------------
SessionFactory sf = new Configuration().configure().buildSessionFactory(); 





2.How to create session obj?
---------------------------------------------------
Session session = sf.openSession();




How to create tables automatically?
------------------------------------------

<property name="hbm2ddl.auto">create</property>
But this option will delete and create the tables every time.


<property name="hbm2ddl.auto">update</property>
But this option will create/update the tables every time.


<property name="hbm2ddl.auto">validate</property>
But this option will validate the entity classes and tables.



 

How to insert a row in EmployeeDetails TABLE:
-----------------------------------------------
1.create sf obj
2.crate session obj
3.create entity obj with data
4.open txn  [create transaction obj ]
5.call session.save() method by passing employee object
6.commit transaction
7.close session


  
  
  

How to update a row in EmployeeDetails TABLE:
-----------------------------------------------
1.create sf obj
2.crate session obj
3.create entity obj with data
4.open txn  [create transaction obj ]
5.call session.update() method by passing employee object
6.commit transaction
7.close session



How to delete a row in EmployeeDetails TABLE:
-----------------------------------------------
1.create sf obj
2.crate session obj
3.create entity obj with data
4.open txn  [create transaction obj ]
5.call session.delete() method by passing employee object
6.commit transaction
7.close session  
  
  
 
How to RETRIVE a row from EmployeeDetails TABLE using primary key id
------------------------------------------------------------------------
1.create sf obj
2.crate session obj
3.call session.get() method  or session.load() method by pasisng className , primary key id.
This method will retunr the employee object
4.close session






















































